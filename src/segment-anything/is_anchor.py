from argparse import ArgumentParser
import json
import pandas as pd
import sys

sys.path.append('/home/basile/Documents/projet_bees_detection_basile/bees_detection/src/yolo/keras_yolov2')

from utils import import_feature_extractor






# import utils as yolov2_utils


path_config = '/home/basile/Documents/projet_bees_detection_basile/bees_detection/src/yolo/config/bees_detection_mobilenet_retrain_find_lr_lr_scheduler.json'
path_csv = '/home/basile/Documents/projet_bees_detection_basile/test3/output_test_2.csv'


with open(path_config) as config_buffer:
    config = json.loads(config_buffer.read())

anchors = config['model']['anchors']

def get_grid_size(path_config):

    """
    Get the grid size of the feature extractor

    params:
        path_config: path to the config file

    return:
        grid_w: width of the grid
        grid_h: height of the grid
    """

    with open(path_config) as config_buffer:
        config = json.loads(config_buffer.read())

    input_size = (config['model']['input_size_h'], config['model']['input_size_w'], 3)
    feature_extractor = import_feature_extractor(config['model']['backend'], input_size)
    grid_w = config['model']['input_size_w']/feature_extractor.get_output_shape()[1]
    grid_h = config['model']['input_size_h']/feature_extractor.get_output_shape()[0]

    return grid_w, grid_h


def convert_anchors_to_pixels(anchors, grid_w, grid_h,feature_extractor,img_size, input_size):

    """
    Convert the anchors generated by gen_anchors.py to bounding boxes shapes in pixels
    with pixel coordinates (width, height)
    
    params:
        anchors: list of anchors defined in the config file (list of pairs (width, height))
        grid_w: width of the grid
        grid_h: height of the grid
        feature_extractor: feature extractor
        img_size: size of the image
        input_size: size of the input of the feature extractor

    return:
        bboxes: list of bounding boxes (list of (w,h))
    """

    bbox_shapes = []

    # iterate over the anchors
    for anchor in anchors:

        # get the width and height of the anchor
        anchor_width = anchor[0]
        anchor_height = anchor[1]

       # get the width and height of the input
        input_width = input_size[1]
        input_height = input_size[0]

        # get the width and height of the feature extractor output
        output_width = feature_extractor.get_output_shape()[1]
        output_height = feature_extractor.get_output_shape()[0]

        # get the width and height of the image
        img_width = img_size[1]
        img_height = img_size[0]

        # compute the width and height of the bounding box in pixels
        bbox_width = anchor_width * img_width * output_width / input_width
        bbox_height = anchor_height * img_height * output_height / input_height

        # append the bounding box to the list
        bbox_shapes.append((bbox_width, bbox_height))

    return bbox_shapes








def correspond_to_anchors(anchors, bbox, threshold=0.5): 

    """
    Check if the bbox correspond to one of the anchors

    params:
        anchors: list of anchors defined in the config file (list of pairs (width, height))
        bbox: bounding box
        threshold: threshold to consider that the bbox correspond to an anchor

    return:
        True if the bbox correspond to one of the anchors, False otherwise    
    """ 

    # get the width and height of the bounding box
    bbox_width = bbox[2]-bbox[0]
    bbox_height = bbox[3]-bbox[1]

    # iterate over the anchors
    for anchor in anchors:

        # check if the width and height of the bounding box are in the interval [anchor_width - threshold, anchor_width + threshold]
        # and [anchor_height - threshold, anchor_height + threshold]

        if (anchor[0] - threshold <= bbox_width <= anchor[0] + threshold) and (anchor[1] - threshold <= bbox_height <= anchor[1] + threshold):
            return True
        
    return False





print(get_grid_size(path_config))
    






# df = pd.read_csv(path_csv)
# df.columns = ['img_path','xmin', 'ymin', 'xmax', 'ymax','label','width','height']

# # iterate over the rows of the dataframe

# for index, row in df.iterrows():

#     # get the bounding box
#     bbox = [row['xmin'], row['ymin'], row['xmax'] - row['xmin'], row['ymax'] - row['ymin']]

#     # append the result of the function correspond_to_anchors to the dataframe
#     df.loc[index, 'correspond_to_anchors'] = correspond_to_anchors(anchors, bbox)

# # save the dataframe
# new_path_csv = path_csv[:-4] + '_anchors.csv'
# df.to_csv(new_path_csv)